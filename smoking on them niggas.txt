getgenv().Elysian = {
    ['Main'] = {
        ['Lock'] = {
            ['Prediction'] = {
                ['Enabled'] = true,
                ['Method'] = "Multiplication",
                ['Division'] = {
                    ['X'] = 1.0,
                    ['Y'] = 1.0
                },
                ['Multiplication'] = {
                    ['Value'] = 0.14728054792824583
                },
                ['Auto Prediction'] = {
                    ['Enabled'] = true,
                    ['Config'] = {
                        ['50'] = 0.12758545757236864,
                        ['60'] = 0.12593338424986178,
                        ['70'] = 0.1416310605747206,
                        ['80'] = 0.1441481061236737,
                        ['90'] = 0.14306050263254388,
                        ['100'] = 0.14698413210558095,
                        ['110'] = 0.14528324362031425,
                        ['120'] = 0.14556534594403,
                        ['130'] = 0.14614337395777216,
                        ['140'] = 0.14645603036905414,
                        ['150'] = 0.14736848095666674,
                        ['160'] = 0.14696985547996216
                    }
                }
            },
            ['Offset'] = {
                ['Jump'] = -2
            },
            ['Part'] = "LowerTorso",
            ['Checks'] = {
                ['K.O'] = true,
                ['Grabbed'] = true
            }
        },
        ['Camera'] = {
            ['Smoothing'] = {
                ['Enabled'] = false,
                ['Amount'] = 0.11
            }
        }
    },
    ['Rage'] = {
        ['Strafe'] = {
            ['Enabled'] = true,
            ['Speed'] = 100,
            ['Distance'] = 10,
            ['Height'] = 10
        },
        ['Cframe'] = {
            ['Enabled'] = true,
            ['Amount'] = 5
        }
    },
    ['Auto'] = {
        ['Shoot'] = true
    },
    ['Visuals'] = {
        ['Box Target'] = true,
        ['Target Tracer'] = true,
        ['Colors'] = {
            ['Box'] = Color3.fromRGB(255, 255, 255),
            ['Tracer'] = Color3.fromRGB(255, 255, 255)
        }
    }
}

local userInputService = game:GetService("UserInputService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local client = players.LocalPlayer
local camera = workspace.CurrentCamera
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

local Locking = false
local Plr = nil
local strafing = false
local cframing = false
local auto_shooting = false

local playerData = {}
local SMOOTHNESS_FACTOR = 2

local function GetEvent()
    for _, v in pairs(game.ReplicatedStorage:GetChildren()) do
        if v.Name == "MainEvent" or v.Name == "Bullets" or v.Name == ".gg/untitledhood" or v.Name == "Remote" or v.Name == "MAINEVENT" or v.Name == ".gg/flamehood" then
            return v
        end
    end
end

local function GetArgs()
    local PlaceId = game.PlaceId
    if PlaceId == 2788229376 or PlaceId == 4106313503 or PlaceId == 11143225577 or PlaceId == 17319408836 or PlaceId == 18110728826 then
        return "UpdateMousePosI"
    elseif PlaceId == 5602055394 or PlaceId == 7951883376 then
        return "MousePos"
    elseif PlaceId == 10100958808 or PlaceId == 12645617354 or PlaceId == 14171242539 or PlaceId == 14412436145 or PlaceId == 14412355918 or PlaceId == 14413720089 or PlaceId == 17403265390 or PlaceId == 17403166075 or PlaceId == 17403262882 or PlaceId == 15186202290 or PlaceId == 15763494605 then
        return "MOUSE"
    elseif PlaceId == 9825515356 then
        return "MousePosUpdate"
    elseif PlaceId == 15166543806 then
        return "MoonUpdateMousePos"
    elseif PlaceId == 16033173781 or PlaceId == 7213786345 then
        return "UpdateMousePosI"
    else
        return "UpdateMousePos"
    end
end

local mainEvent = GetEvent()

function GetClosestToCenter()
    local closestDist = math.huge
    local closestPlr = nil
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    
    for _, v in ipairs(players:GetPlayers()) do
        if v ~= client and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            local screenPos, onScreen = camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
            if onScreen then
                local distToCenter = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
                if distToCenter < closestDist then
                    closestPlr = v
                    closestDist = distToCenter
                end
            end
        end
    end
    return closestPlr
end

local function getPart()
    if not Plr or not Plr.Character then
        return nil
    end

    local humanoid = Plr.Character:FindFirstChild("Humanoid")
    if not humanoid then
        return nil
    end

    if humanoid:GetState() == Enum.HumanoidStateType.Freefall and getgenv().Elysian.Main.Lock.Prediction.Enabled then
        local airshotPart = Plr.Character:FindFirstChild(getgenv().Elysian.Main.Lock.Part)
        if airshotPart then
            return airshotPart
        end
    end

    local targetPart = Plr.Character:FindFirstChild(getgenv().Elysian.Main.Lock.Part)
    if targetPart then
        return targetPart
    end

    return Plr.Character:FindFirstChild("HumanoidRootPart")
end

local function getPredictionValue()
    if getgenv().Elysian.Main.Lock.Prediction['Auto Prediction']['Enabled'] then
        local ping = math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
        local pingTable = getgenv().Elysian.Main.Lock.Prediction['Auto Prediction'].Config
        
        for i = ping, 0, -1 do
            if pingTable[tostring(i)] then
                return pingTable[tostring(i)]
            end
        end
        
        return pingTable['100']
    else
        return getgenv().Elysian.Main.Lock.Prediction.Multiplication.Value
    end
end

local function calculatePosition(Position, velocity)
    local method = getgenv().Elysian.Main.Lock.Prediction.Method

    if method == "Division" then
        local divisionSettings = getgenv().Elysian.Main.Lock.Prediction.Division
        return Position + (velocity / Vector3.new(divisionSettings.X, divisionSettings.Y, divisionSettings.X))
    elseif method == "Multiplication" then
        local multiplicationValue = getgenv().Elysian.Main.Lock.Prediction.Multiplication.Value
        return Position + (velocity * multiplicationValue)
    end
end

local function AutoShoot()
    if Locking and Plr then
        local character = client.Character
        if character then
            local tool = character:FindFirstChildOfClass("Tool")
            if tool and tool:IsA("Tool") then
                tool:Activate()
            end
        end
    end
end

runService.Heartbeat:Connect(function(dT)
    for _, player in ipairs(players:GetPlayers()) do
        if player ~= client then
            Process(player, dT)
        end
    end

    if getgenv().Elysian.Rage.Strafe.Enabled and Locking and strafing and Plr and Plr.Character then
        local targetHRP = Plr.Character:FindFirstChild("HumanoidRootPart")
        if targetHRP then
            strafeAngle = strafeAngle + math.rad(getgenv().Elysian.Rage.Strafe.Speed)
            
            local distance = getgenv().Elysian.Rage.Strafe.Distance
            local height = getgenv().Elysian.Rage.Strafe.Height
            
            local offsetX = math.sin(strafeAngle) * distance
            local offsetZ = math.cos(strafeAngle) * distance
            local offsetY = math.sin(strafeAngle * 2) * height
            
            local predictedPosition = calculatePosition(targetHRP.Position, playerData[Plr].Velocity)
            local strafePosition = predictedPosition + Vector3.new(offsetX, offsetY, offsetZ)
            
            if client.Character and client.Character:FindFirstChild("HumanoidRootPart") then
                client.Character.HumanoidRootPart.CFrame = CFrame.new(strafePosition, predictedPosition)
            end
        end
    end

    if cframing and getgenv().Elysian.Rage.Cframe.Enabled and client.Character and client.Character:FindFirstChild("Humanoid") and client.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = client.Character.HumanoidRootPart
        local moveDirection = client.Character.Humanoid.MoveDirection
        hrp.CFrame = hrp.CFrame + (moveDirection * getgenv().Elysian.Rage.Cframe.Amount)
    end

    if auto_shooting then
        AutoShoot()
    end
end)

runService.RenderStepped:Connect(function()
    if Locking and Plr and Plr.Character and playerData[Plr] then
        local Part = getPart()
        if Part then
            local Position = calculatePosition(Part.Position, playerData[Plr].Velocity)
            local Main = CFrame.new(camera.CFrame.p, Position)
            
            if getgenv().Elysian.Main.Camera.Smoothing.Enabled then
                camera.CFrame = camera.CFrame:Lerp(Main, getgenv().Elysian.Main.Camera.Smoothing.Amount)
            else
                camera.CFrame = Main
            end
        end
    end
end)